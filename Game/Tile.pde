class Tile {
  /*A Tile holds properties of the terrain */
  int slope;   //Slope of tile
  int soil;  
  int xpos;  //x-coordinate
  int ypos;  //y-coordinate
  float distToRiver;   //This is calculated only when a landuse (non-greenField) is added.
  LandType landT;
  
  Tile(LandType lt, int x, int y, int sl, int so) {
   /* Constructor: Initializes Tile with LandType lt, and integer slope sl, soil so values */
   landT = lt;
   xpos = x;
   ypos = y;
   slope = sl;
   soil = so;
  }
  
  int getSlope() {
    /*Retuns slope of the tile */
    return slope;
  }
  
  int getSoil() {
    /* Returns the soil permeability of the tile */
    return soil;
  }
  
  LandType getLandT() {
    /* Returns the LandType object of the Tile */
    return landT;
  }
  
  void changeLandType(LandType lt) {
    /* Changes the LandType held by the Tile to lt */
    landT = lt;
  }
  
  int getPollution() {
    /* Returns the pollution generated by the LandUse held by the Tile */
    if (! (landT instanceof River)) {
      LandUse lu = (LandUse)landT;
      return lu.getPollution();
    }else return 0;
  }
  
  // ----  Some geometry methods ---- //
  int getX(){
    /* Returns the xpos of the tile */
    return xpos;
  }
  
  int getY(){
    /* Returns the xpos of the tile */
    return ypos;
  }
  
  float distFrom(Tile other) {
    /*Returns distance of self from other tile */
    int ox = other.getX();
    int oy = other.getY();
    int xDist = xpos - ox;
    int yDist = ypos - oy;
    float dist = sqrt(sq(xDist) + sq(yDist));
    return dist;
  }
  
  @Override
  public String toString() {
    return "<" + str(xpos) + ", " + str(ypos)+ ">";
  }
}